#+OPTIONS: num:nil toc:nil
file:branding/logo/bless_logo.png
#+TOC: headlines 2
* About
A simple command line wrapper for repeated runs, with metadata and lightweight
tracking.
** Why?
During development, a full interface to HPC oriented workflow engines like
AiiDA, Fireworks, Jobflow, and the like is typically too heavy, and more
importantly, the API is often not stable. That being said, this could also be
used in conjunction with ~pychum~ and workflow runners like Snakemake to store
** Design
*** File (gzip) Writer
This overrides the ~Log~ levels of Rust, so:
- ~TRACE~ is for additional information for the command, as written by ~bless~
- ~INFO~ corresponds to ~stdout~ of the command
- ~ERROR~ corresponds to a ~bless~ error
- ~WARN~ corresponds to ~stderr~ of the command
* Usage
#+begin_src bash
cargo build --release
MONGODB_URI="mongodb://localhost:27017/" ./target/release/bless --use-mongodb -- echo "bye"
# Then view it in mongosh
# or
./target/release/bless -- echo "bye"
zcat default_label*.gz
#+end_src
* Development
** Component Rationale
- Duct :: For [[https://github.com/oconnor663/duct.py/blob/master/gotchas.md][the gotchas]]
- Wild :: For cross-platform globs
- Flate2 :: For compression
- UUID ::  For the unique IDs
- Fern :: For log handling
** Local MongoDB
Assuming ~pixi~ is used to get an instance of ~mongod~.
#+begin_src bash
pixi run mongod --dbpath $(pwd)/data/database
MONGODB_URI="mongodb://localhost:27017/" ./target/release/bless --use-mongodb -- $CMD_TO_RUN
#+end_src
I use ~npx mongosh~ for validating commands.
#+begin_src bash
npx mongsh
use local
db.commands.find()
#+end_src
** Documentation
*** Readme
The ~readme~ can be constructed via:
#+begin_src bash
./scripts/org_to_md.sh readme_src.org readme.md
#+end_src
metadata more generically.
* License
MIT. However, this is an academic resource, so *please cite* as much as possible
via:
- The Zenodo DOI for general use.
- TBD a publication
